#!/usr/bin/perl

use strict;
use warnings;
use English qw( -no_match_vars );    # Avoids regex performance penalty
use Data::Dumper;
use FindBin qw($Bin);
use Getopt::Long;
use Cwd qw(realpath);
use File::Spec;

# save path to this dfm program, for use in recursive calls
my $self_dfm = $0;

my $command;
foreach my $arg (@ARGV) {
    next if $arg =~ /^-/;
    $command = $arg;
}

if ( !$command ) {
    $command = 'install';
}

my $home = realpath( $ENV{HOME} );

my $repo_dir = $Bin;
$repo_dir =~ s/$home\///;
$repo_dir =~ s/\/bin//;

DEBUG("Repo dir: $repo_dir");

my $profile_filename = '.bashrc';

if ( lc($OSNAME) eq 'darwin' ) {
    $profile_filename = '.profile';
}

my %opts;
if ( $command eq 'install' ) {
    GetOptions( \%opts, 'verbose', 'quiet', 'dry-run', 'help' );

    if ( $opts{'help'} ) {
        show_usage();
        exit;
    }

    INFO(
        "Installing dotfiles..." . ( $opts{'dry-run'} ? ' (dry run)' : '' ) );

    DEBUG("Running in [$Bin] and installing in [$home]");

    # install files
    install_files( $home . '/' . $repo_dir, $home );

    # link in the bash loader
    configure_bash_loader();
}
elsif ( $command eq 'updates' ) {
    GetOptions( \%opts, 'verbose', 'quiet', 'dry-run', 'no-fetch', 'help' );

    if ( $opts{'help'} ) {
        show_usage();
        exit;
    }

    chdir( $home . '/' . $repo_dir );

    if ( !$opts{'no-fetch'} ) {
        DEBUG('fetching changes');
        system("git fetch") if !$opts{'dry-run'};
    }

    my $current_branch = get_current_branch();

    print get_changes("$current_branch..origin/$current_branch"), "\n";
}
elsif ( $command eq 'mi' || $command eq 'mergeandinstall' ) {
    GetOptions( \%opts, 'verbose', 'quiet', 'dry-run', 'help', 'merge',
        'rebase' );

    if ( $opts{'help'} ) {
        show_usage();
        exit;
    }

    chdir( $home . '/' . $repo_dir );

    my $current_branch = get_current_branch();

    my $sync_command = $opts{'rebase'} ? 'rebase' : 'merge';

    if ( get_changes("$current_branch..origin/$current_branch") ) {

        # check for local commits
        if ( my $local_changes
            = get_changes("origin/$current_branch..$current_branch") )
        {

            # if a decision wasn't made about how to deal with local commits
            if ( !$opts{'merge'} && !$opts{'rebase'} ) {
                WARN(
                    "local changes detected, run with either --merge or --rebase"
                );
                print $local_changes, "\n";
                exit;
            }
        }

        INFO("using $sync_command to bring in changes");
        system("git $sync_command origin/$current_branch")
            if !$opts{'dry-run'};

        INFO("re-installing dotfiles");
        system("HOME=$home $self_dfm install") if !$opts{'dry-run'};
    }
    else {
        INFO("no changes to merge");
    }
}
elsif ( $command eq 'un' || $command eq 'uninstall' ) {
    GetOptions( \%opts, 'verbose', 'quiet', 'dry-run', 'help' );

    if ( $opts{'help'} ) {
        show_usage();
        exit;
    }

    INFO( "Uninstalling dotfiles..."
            . ( $opts{'dry-run'} ? ' (dry run)' : '' ) );

    DEBUG("Running in [$Bin] and installing in [$home]");

    # uninstall files
    uninstall_files( $home . '/' . $repo_dir, $home );

    # remove the bash loader
    unconfigure_bash_loader();
}
else {

    # assume it's a git command and call accordingly
    chdir( $home . '/' . $repo_dir );
    exec( 'git', @ARGV );
    exit;
}

exit;

sub get_changes {
    my $what = shift;

    return `git log --pretty='format:%h: %s' $what`;
}

sub get_current_branch {
    my $current_branch = `git symbolic-ref HEAD`;
    chomp $current_branch;

    # convert 'refs/heads/personal' to 'personal'
    $current_branch =~ s/^.+\///g;

    DEBUG("current branch: $current_branch");

    return $current_branch;
}

# a few log4perl-alikes
sub WARN {
    printf "WARN: %s\n", shift;
}

sub INFO {
    printf "INFO: %s\n", shift if !$opts{quiet};
}

sub DEBUG {
    printf "DEBUG: %s\n", shift if $opts{verbose};
}

# function to install files
sub install_files {
    my ( $from_dir, $to_dir, $initial_skips ) = @_;
    $initial_skips ||= [];

    DEBUG("Installing from $from_dir into $to_dir");

    my $symlink_base;

    # if the paths have no first element in common
    if ( ( File::Spec->splitdir($from_dir) )[1] ne
        ( File::Spec->splitdir($to_dir) )[1] )
    {
        $symlink_base = $from_dir;    # use absolute path
    }
    else {

        # otherwise, calculate the relative path between the two directories
        $symlink_base = File::Spec->abs2rel( $from_dir, $to_dir );
    }

    my $backup_dir = $to_dir . '/.backup';
    DEBUG("Backup dir: $backup_dir");

    chdir($to_dir);

    # build up skip list
    my $skip_files = { map { $_ => 1 } @$initial_skips };
    my $recurse_files = [];
    if ( -e "$from_dir/.dfminstall" ) {
        open( my $skip_fh, '<', "$from_dir/.dfminstall" );
        foreach my $line (<$skip_fh>) {
            chomp($line);
            if ( length($line) ) {
                my ( $filename, $option ) = split( / /, $line );
                $skip_files->{$filename} = 1;
                if ( !defined $option || $option ne 'skip' ) {
                    push( @$recurse_files, $filename );
                }
            }
        }
        close($skip_fh);
        $skip_files->{skip} = 1;

        DEBUG("Skipped file: $_") for keys %$skip_files;
    }

    if ( !-e $backup_dir ) {
        DEBUG("Creating $backup_dir");
        mkdir($backup_dir) if !$opts{'dry-run'};
    }

    my $dirh;
    opendir $dirh, $from_dir;
    foreach my $direntry ( readdir($dirh) ) {

        # skip current and parent
        next if $direntry eq '.' or $direntry eq '..';

        # skip vim swap files
        next if $direntry =~ /.*\.sw.$/;

        # always skip .dfminstall files
        next if $direntry eq '.dfminstall';

        # always skip .gitignore files
        next if $direntry eq '.gitignore';

        # always skip the .git repo
        next if $direntry eq '.git';

        # skip any other files
        next if $skip_files->{$direntry};

        DEBUG(" Working on $direntry");

        if ( !-l $direntry ) {
            if ( -e $direntry ) {
                INFO("  Backing up $direntry.");
                system("mv $direntry $backup_dir/$direntry")
                    if !$opts{'dry-run'};
            }
            INFO("  Symlinking $direntry ($symlink_base/$direntry).");
            symlink( "$symlink_base/$direntry", "$direntry" )
                if !$opts{'dry-run'};
        }
    }

    foreach my $recurse (@$recurse_files) {
        if ( -d "$from_dir/$recurse" ) {
            DEBUG("recursing into $recurse");
            if ( !-d $recurse ) {
                DEBUG("making directory $recurse");
                mkdir($recurse);
            }
            install_files( "$from_dir/$recurse", "$to_dir/$recurse" );
        }
        else {
            WARN("couldn't recurse into $recurse, not a directory");
        }
    }
}

sub configure_bash_loader {
    chdir($home);

    my $bashrc_contents = _read_bashrc_contents();

    # check if the loader is in
    if ( $bashrc_contents !~ /\.bashrc\.load/ ) {
        INFO("Appending loader to $profile_filename");
        $bashrc_contents .= "\n. \$HOME/.bashrc.load\n";
    }

    _write_bashrc_contents($bashrc_contents);
}

sub uninstall_files {
    my ( $to_dir, $from_dir ) = @_;

    DEBUG("Uninstalling from $from_dir");

    my $backup_dir = $from_dir . '/.backup';
    DEBUG("Backup dir: $backup_dir");

    chdir($from_dir);

    # build up recurse list
    my $recurse_files = [];
    if ( -e "$to_dir/.dfminstall" ) {
        open( my $dfminstall_fh, '<', "$to_dir/.dfminstall" );
        foreach my $line (<$dfminstall_fh>) {
            chomp($line);
            if ( length($line) ) {
                my ( $filename, $option ) = split( / /, $line );
                if ( !defined $option || $option ne 'skip' ) {
                    push( @$recurse_files, $filename );
                }
            }
        }
        close($dfminstall_fh);
    }

    my $dirh;
    opendir $dirh, $from_dir;
    foreach my $direntry ( readdir($dirh) ) {

        DEBUG(" Working on $direntry");

        if ( -l $direntry ) {
            my $link_target = readlink($direntry);
            DEBUG("$direntry points a $link_target");
            my ( $volume, @elements ) = File::Spec->splitpath($link_target);
            my $element = pop @elements;

            my $target_base = realpath(
                File::Spec->rel2abs( File::Spec->catpath( '', @elements ) ) );

            DEBUG("target_base $target_base $to_dir");
            if ( $target_base eq $to_dir ) {
                INFO("  Removing $direntry ($link_target).");
                unlink($direntry) if !$opts{'dry-run'};
            }

            my $backup_path = File::Spec->catpath( '', '.backup', $element );
            if ( -e $backup_path ) {
                INFO("  Restoring $direntry from backup.");
                rename( $backup_path, $element ) if !$opts{'dry-run'};
            }
        }
    }

    foreach my $recurse (@$recurse_files) {
        if ( -d "$from_dir/$recurse" ) {
            DEBUG("recursing into $recurse");
            uninstall_files( "$to_dir/$recurse", "$from_dir/$recurse" );
        }
        else {
            WARN("couldn't recurse into $recurse, not a directory");
        }
    }
}

sub unconfigure_bash_loader {
    chdir($home);

    my $bashrc_contents = _read_bashrc_contents();

    # remove bash loader if found
    $bashrc_contents =~ s{\n. \$HOME/.bashrc.load\n}{}gs;

    _write_bashrc_contents($bashrc_contents);
}

sub _write_bashrc_contents {
    my $bashrc_contents = shift;

    if ( !$opts{'dry-run'} ) {
        open( my $bashrc_out, '>', $profile_filename );
        print $bashrc_out $bashrc_contents;
        close $bashrc_out;
    }
}

sub _read_bashrc_contents {
    my $bashrc_contents;
    {
        local $INPUT_RECORD_SEPARATOR = undef;
        if ( open( my $bashrc_in, '<', $profile_filename ) ) {
            $bashrc_contents = <$bashrc_in>;
            close $bashrc_in;
        }
        else {
            $bashrc_contents = '';
        }
    }
    return $bashrc_contents;
}

sub show_usage {
    print <<END;
Usage:
    dfm install [--verbose|--quiet] [--dry-run]
    dfm uninstall [--verbose|--quiet] [--dry-run]
    dfm updates [--verbose|--quiet] [--dry-run] [--no-fetch]
    dfm mergeandinstall [--verbose|--quiet] [--dry-run] [--merge|--rebase]
    dfm [git subcommand] [git options]

For full documentation, run "perldoc ~/$repo_dir/bin/dfm".
END
}

__END__

=head1 NAME

    dfm - A script to manage a dotfiles repository

=head1 SYNOPSIS

    dfm install [--verbose|--quiet] [--dry-run]

    dfm uninstall [--verbose|--quiet] [--dry-run]
     - or -
    dfm un [--verbose|--quiet] [--dry-run]

    dfm updates [--verbose|--quiet] [--dry-run] [--no-fetch]

    dfm mergeandinstall [--verbose|--quiet] [--dry-run] [--merge|--rebase]
     - or -
    dfm mi [--verbose|--quiet] [--dry-run] [--merge|--rebase]

    dfm [git subcommand] [git options]

=head1 DESCRIPTION

    Manages installing files from and operating on a repository that contains
    dotfiles.

=head1 COMMON OPTIONS

All the subcommands implemented by dfm have the following options:

  --verbose     Show extra information about what dfm is doing
  --quiet       Show as little info as possible.
  --dry-run     Don't do anything.

=head1 COMMANDS

=over

=item dfm uninstall

This removes all traces of dfm and the dotfiles.  It basically is the reverse
of 'dfm install'.

=item dfm install

This is the default command.  Running 'dfm' is the same as running 'dfm
install'.

This installs everything in the repository into the current user's home
directory by making symlinks.  To skip any files, add their names to a file
named '.dfminstall'.  For instance, to skip 'README.md', put this in
.dfminstall:

    README.md skip

To recurse into a directory and install files inside rather than symlinking the
directory itself, just add its name to .dfminstall.  For instance, to make 'dfm
install' symlink files inside of ~/.ssh instead of making ~/.ssh a symlink, put
this in .dfminstall:

    .ssh

=item dfm updates [--no-fetch]

This fetches any changes from the origin remote and then shows a shortlog of
what updates would come in if merged into the current branch.  Use '--no-fetch'
to skip the fetch and just show what's new.

=item dfm mergeandinstall [--merge|--rebase]

This merges or rebases the upstream changes in and re-installs dotfiiles.  A
convenient alias is 'mi'.

=item dfm [git subcommand] [git options]

This runs any git command as if it was inside the dotfiles repository.  For
instance, this makes it easy to commit changes that are made by running 'dfm
commit'.

=back

=head1 AUTHOR

Nate Jones <nate@endot.org>

=head1 COPYRIGHT

Copyright (c) 2010 L</AUTHOR> as listed above.

=head1 LICENSE

This program is free software distributed under the Artistic License 2.0.

=cut
